HOW TO communicate with HOST WITH COMMAND AND ARGUMENT

Ping module
ansible hostName -m ping

shell module
ansible hostName -m shell -a "df -h"  ---> to show available space or storage size or memory size of the host  or server or ec2-server

ansible hostname -m shell -a "df -h" --extra-vars "password=admin123"   storage size for host with variable password

ansible hostname -m shell -a "kubectl get nodes" --extra-vars "password=admin123" to list nodes in k8s host with variable password 

playbook command
ansible-playbook playbookFileName ---->   for default for default inventory host file which is  (/etc/ansible/hosts )

ansible-playbook playbookFileName  -i custom-hosts -> for default for default inventory host file which is  ( if the custom host file was named custom-hosts)

ansible-playbook playbookFileName --syntax-check ---->   to check if thee is syntax error

ansible-playbook playbookFileName --check ----> to run a dry-run to know what you are expected to see before. it can also run as syntax.

 ansible serverName -m setup -i hosts    to check the linux distribution of your host

 ansible k8s -m shell -a "kubectl get pod" --vault-password=v-file
 
ansible vault command

FOR GROUP VARIABLE 

amsible-vault encrypt /etc/ansible/directoryName/passwordName       for default inventory host file

amsible-vault encrypt /etc/ansible/directoryName/passwordName       for default inventory host file

it wil ask you to enter new vault password, enter the password you like and confirm the password

amsible k8s-kops -m ping --ask-vault-pass       for default inventory host file

enter the vault password     

For the purpose of automation. you can create a file and paste the vault paasowrd insid. like

kim123

which is the vault password you maybe have used and then save it in a file

ansible k8s -m shell -a "kubectl get pod" --vault-password=passwordFileName

it will list pods in k8s cluster without asking for vault password

ansible k8s -m ping --vault-password=passwordFileName

NOTE:

When you want to run a command in you host via your ansible environment, you must parse a shell module -m shell   and also parse an argument -a   and the command will be inside ""  like below

amsible k8s -m shell -a "kubectl get nodes" --ask-vault-pass

ansible k8s -m shell -a "df -h" --ask-vault-pass

If you want a situation whereby you do not want the vault to ask for passpwrd for the 
benefit of automation, You can also just create a vault password file.

Let say the vault password is kim123. the will will paste the below into the file

password: kim123

and save-quit.

if you run the command

ansible k8s -m shell -a "kubectl get pod" --vault-password=v-file

it will list pods in k8s cluster without asking for vault passwrd

ansible k8s -m ping --vault-password=v-file

NOTE:

This vault password configuration that you have done will take over your enter ansible environment so that anytime you want to perform any command, you would have to parse the vault password command  

--vault-password=passwordFileName       ----> when vault password is saved it in a file

     or

--ask-vault-pass        ----> when vault password is not saved it in a file

if you run

ansible all -m ping --vault-password=v-file.yml           for a default inventory file

it will ping everything hosts in your default inventory file

The vault passowrd is the key that will open your ansible environment for any action or command to take place

1. STEP BY STEP TASK

We have different task to be executed in a playbook and you want to be sure of which task you actually want to execute. Maybe you change you mind to execute a specifc task in the playbook. You can run a playbook step command like

ansible-playbook playbookName --step       it will run from a default inventoryFile


ansible-playbook ae.yml -e "index=osas"  --step --vault-password=v-file.yml

or

 ansible-playbook ae.yml --extra-vars "index=osas"  --step --vault-password=v-file.yml


It will run each task step by step that is in your playbook. If you do not want a task that display, you can type in NO and if you want the task that display, you can type in YES.

When prof run the playbook step command, it shows gathering facts, prof press "n" as NO because he didnt want it to gather facts. You can do same for any task you do want it to execute.

IQ

What module is responsible in the gathering of facts in ansible.

Answer: the answer is setup module

The setup modules will tell you how your operating system for your host is. The name of your operating system, the size and other info.

ansible demo-1 -m setup             

ansible demo-1 -m setup -e "index=osas"--vault-password=v-file.yml

they both will read from the default host file

IQ

HOW IS A SPECIFIC TASK RUNNED OR EXECUTED IN A PLAYBOOK?

answer: 

There are different options that you can use.

1. ansible-playbook apache.yml  --step   this run task step by step and allow you to type in YES or NO. THis may be tideous if you have multiple tasks that may be up to a 100. it will be time consuming and tideous to be typing yes or no.


2. Assign tags to task
 
 Let us place a tag on each task we have in our playbook as already done above. 

 Let only install apache as task we want to do in the playbook above as an example.

 the tag name for the task "install apache" is 'install'   we can now run the command

 ansible-playbook apache.yml  --tags 'install'

 ansible-playbook apache.yml  -e "index=osas"  --tags 'install' --vault-password=v-file.yml


You will see that it will install apache. Note: since there is a notifier that will notify handler that appache has been installed and the it should start apache as defined in the playbook, handler will run. and so apache will be started.

I think assiging a tag to all the tasks will be it more easier to run a specific tasks in a playbook than a step command

3. skip-tags

This is used to skip multiple tags

You can skip tags that is assigned to task.

Let us skip the tags called install and index to make sure that they do not run, since we already have install tags running already. We want others to run also by skipping index tags and install tags. we decided to also skip install tags because its already running. by running

ansible-playbook apache.yml  --skip-tags 'install,index'

once you run the command, it will tell you that there us undefined variable called dynamic content which as defined on the playbook. There was a variable content on that task and the content was "{{index}}"  we need to define this variable by saying what that variable means.

You can defined "{{index}}"  as -e "index=devops"

You can defined "{{index}}"  as --extra-vars "index=devops"

You can now skip both install and index tags as below

ansible-playbook --skip-tags 'install, index' -e "index=devops"

ansible-playbook --skip-tags 'install, index' --extra-vars "index=landmark"

or

ansible-playbook --skip-tags 'install, index' --extra-vars "index=landmark" --vault-password=v-file.yml


